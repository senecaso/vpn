#!/usr/bin/env python3

import argparse
import subprocess
import ipaddress
import os
from ruamel import yaml


class WGConfig:
    def __init__(self, yaml_file, endpoint='localhost'):
        self.config = yaml.safe_load(yaml_file)

        if not self.config:
            self.config = {}

        if 'Endpoint' not in self.config:
            if endpoint:
                self.config['Endpoint'] = endpoint
            else:
                self.config['Endpoint'] = 'localhost'

        if 'DNS' not in self.config:
            self.config['DNS'] = ['1.1.1.1', '1.0.0.1', '2606:4700:4700::1111', '2606:4700:4700::1001']

        if 'Interface' not in self.config:
            # first time this has been run, set one up
            self.config['Interface'] = {}
            self.config['Interface']['Address'] = ['10.19.49.1/24', 'fd9d:bc11:4021::1/48']
            self.config['Interface']['ListenPort'] = 51820
            self.config['Interface']['PrivateKey'] = generate_pk('wg')
            self.config['Interface']['SaveConfig'] = False

        # if the server doesnt already have a private key, generate one now
        if 'PrivateKey' not in self.config['Interface']:
            self.config['Interface']['PrivateKey'] = generate_pk('wg')

        if 'Peers' not in self.config:
            self.config['Peers'] = {}

        self.used_ips = set()
        for peer in self.config['Peers']:
            for ip in self.config['Peers'][peer]['AllowedIPs']:
                self.used_ips.add(ip)

    def get_endpoint(self):
        return self.config['Endpoint']

    def get_dns(self):
        return self.config['DNS']

    def get_private_key(self):
        return self.config['Interface']['PrivateKey']

    def get_address(self):
        return self.config['Interface']['Address']

    def get_listen_port(self):
        return self.config['Interface']['ListenPort']

    def get_peers(self):
        return self.config['Peers']

    def get_used_ips(self):
        return self.used_ips

    def add_peer(self, alias, public_key, preshared_key, allowed_ips):
        peer = {'PublicKey': public_key, 'PresharedKey': preshared_key, 'AllowedIPs': allowed_ips}

        self.config['Peers'][alias] = peer

    def rm_peer(self, alias):
        try:
            del self.config['Peers'][alias]
        except KeyError:
            print("peer %s not found" % alias)

    # build out the WireGuard config file
    def get_wg_config(self):
        config =  '##########################################\n'
        config += '# this file is generated by wgadmin      #\n'
        config += '# DO NOT EDIT BY HAND                    #\n'
        config += '##########################################\n'
        config += '\n'
        config += '[Interface]\n'
        config += 'Address = ' + ', '.join([str(i) for i in self.config['Interface']['Address']]) + '\n'
        config += 'ListenPort = ' + str(self.config['Interface']['ListenPort']) + '\n'
        config += 'PrivateKey = ' + self.config['Interface']['PrivateKey'] + '\n'
        config += 'SaveConfig = ' + str(self.config['Interface']['SaveConfig']) + '\n'
        config += '\n'

        for peer in self.config['Peers']:
            config += '[Peer]\n'
            config += '# ' + peer + '\n'
            config += 'PublicKey = ' + self.config['Peers'][peer]['PublicKey'] + '\n'
            config += 'PresharedKey = ' + self.config['Peers'][peer]['PresharedKey'] + '\n'
            config += 'AllowedIPs = ' + ', '.join([str(i) for i in self.config['Peers'][peer]['AllowedIPs']]) + '\n'
            config += '\n'

        return config

    def __str__(self):
        return "{address: %s, listen_port: %s}" % (self.get_address(), self.get_listen_port())


def generate_pk(wg):
    proc = subprocess.Popen([wg, "genkey"], stdout=subprocess.PIPE, shell=False)
    (out, err) = proc.communicate()
    return out.decode("utf-8").strip()


def generate_public_key(wg, private_key):
    proc = subprocess.Popen([wg, "pubkey"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=False)
    proc.stdin.write(private_key.encode('utf-8'))
    (out, err) = proc.communicate()
    return out.decode("utf-8").strip()


def generate_psk(wg):
    proc = subprocess.Popen([wg, "genpsk"], stdout=subprocess.PIPE, shell=False)
    (out, err) = proc.communicate()
    return out.decode("utf-8").strip()


def add(args):
    wg_config = WGConfig(args.input, args.endpoint)

    # generate a new secrets
    private_key = generate_pk('/usr/bin/wg')
    public_key = generate_public_key('/usr/bin/wg', private_key)
    preshared_key = generate_psk('/usr/bin/wg')
    
    # find the next available IPs
    allowed_ips = []
    for address in wg_config.get_address():
        i = 1
        while i < 1024:
            ip = str(ipaddress.ip_interface(ipaddress.ip_interface(address).ip + i))
            if ip not in wg_config.get_used_ips():
                allowed_ips.append(ip)
                break
            
            i += 1

    wg_config.add_peer(args.peer, public_key, preshared_key, allowed_ips)

    client_conf = '[Interface]\n'
    client_conf += 'PrivateKey = ' + private_key + '\n'

    # TODO: figure out how to properly generate these CIDRs
    client_conf += 'Address = ' + allowed_ips[0].replace('/32', '/24')
    if len(allowed_ips) == 2:
        client_conf += ', ' + allowed_ips[1].replace('/128', '/48')
    client_conf += '\n'

    client_conf += 'DNS = ' + ', '.join(wg_config.get_dns()) + '\n'
    client_conf += "\n"
    client_conf += '[Peer]\n'
    client_conf += 'PublicKey = ' + generate_public_key('/usr/bin/wg', wg_config.get_private_key()) + '\n'
    client_conf += 'PresharedKey = ' + preshared_key + '\n'
    client_conf += 'AllowedIPs = 0.0.0.0/0, ::/0\n'
    client_conf += 'Endpoint = ' + wg_config.get_endpoint() + ':' + str(wg_config.get_listen_port()) + '\n'

    # generate the client config file
    with os.fdopen(os.open(args.output + '/' + args.peer + '.conf', os.O_TRUNC | os.O_WRONLY | os.O_CREAT, 0o600), 'w') as handle:
        handle.write(client_conf)

    # update the YAML file
    with os.fdopen(os.open(args.input.name, os.O_TRUNC | os.O_WRONLY | os.O_CREAT, 0o600), 'w') as handle:
        handle.write(yaml.dump(wg_config.config))


def rm(args):
    wg_config = WGConfig(args.input)
    wg_config.rm_peer(args.peer)
    
    # update the YAML file
    with os.fdopen(os.open(args.input.name, os.O_TRUNC | os.O_WRONLY | os.O_CREAT, 0o600), 'w') as handle:
        handle.write(yaml.dump(wg_config.config))


def ls(args):
    wg_config = WGConfig(args.input)
    for peer in wg_config.get_peers():
        print(peer)


def sync(args):
    wg_config = WGConfig(args.input)
    with os.fdopen(os.open(args.output, os.O_TRUNC | os.O_WRONLY | os.O_CREAT, 0o600), 'w') as handle:
        handle.write(wg_config.get_wg_config())


parser = argparse.ArgumentParser(prog='wgadmin')

subparsers = parser.add_subparsers(help='subcommand')

# ADD subcommand
parser_add = subparsers.add_parser('add', help='add a peer')
parser_add.add_argument('peer', help='peer alias to add')
parser_add.add_argument('-i', '--input', type=argparse.FileType('r'), default='/etc/wireguard/wg0.yaml', help='wgadmin config file')
parser_add.add_argument('-o', '--output', default='/tmp', help='directory to store client config')
parser_add.add_argument('-e', '--endpoint', help='public endpoint used to hit this server')
parser_add.set_defaults(func=add)

# RM subcommand
parser_rm = subparsers.add_parser('rm', help='remove a user')
parser_rm.add_argument('peer', help='peer alias to remove')
parser_rm.add_argument('-i', '--input', type=argparse.FileType('r'), default='/etc/wireguard/wg0.yaml', help='wgadmin config file')
parser_rm.set_defaults(func=rm)

# LS subcommand
parser_ls = subparsers.add_parser('ls', help='list users')
parser_ls.add_argument('-i', '--input', type=argparse.FileType('r'), default='/etc/wireguard/wg0.yaml', help='wgadmin config file')
parser_ls.set_defaults(func=ls)

# SYNC subcommand
parser_sync = subparsers.add_parser('sync', help='sync config to WireGuard config file')
parser_sync.add_argument('-i', '--input', type=argparse.FileType('r'), default='/etc/wireguard/wg0.yaml', help='wgamdin config file')
parser_sync.add_argument('-o', '--output', default='/etc/wireguard/wg0.conf', help='path to WireGuard config file')
parser_sync.set_defaults(func=sync)

args = parser.parse_args()
args.func(args) # call the subcommand function to execute based on the parsed args
